package model

import (
	v1 "k8s.io/api/core/v1"
	"k8s.io/apimachinery/pkg/api/resource"
	"k8s.io/client-go/kubernetes"
	"time"
)

// NetworkInfo is the network of vnode, will be set into node addresses
type NetworkInfo struct {
	NodeIP   string `json:"nodeIP"`
	HostName string `json:"hostName"`
}

// NodeStatus is the node curr status
type NodeStatus string

const (
	// NodeStatusActivated node activated, will start vnode if not being started
	NodeStatusActivated NodeStatus = "ACTIVATED"

	// NodeStatusDeactivated node deactivated, will shut down vnode if started
	NodeStatusDeactivated NodeStatus = "DEACTIVATED"
)

// NodeMetadata is the base data of a vnode, will be transfer to default labels of a vnode
type NodeMetadata struct {
	// Name is the name of vnode
	Name string `json:"name"`
	// Version is the version of vnode
	Version string `json:"version"`
	// Status is the curr status of vnode
	Status NodeStatus `json:"status"`
}

// QueryBaselineRequest is the request parameters of query baseline func
type QueryBaselineRequest struct {
	Name         string            `json:"name"`
	Version      string            `json:"version"`
	CustomLabels map[string]string `json:"customLabels"`
	CustomTaints []v1.Taint        `json:"customTaints"`
}

// NodeInfo is the data of node info.
type NodeInfo struct {
	Metadata     NodeMetadata `json:"metadata"`
	NetworkInfo  NetworkInfo  `json:"networkInfo"`
	CustomTaints []v1.Taint   `json:"customTaints"`
}

// NodeResource is the data of node resource
type NodeResource struct {
	Capacity    resource.Quantity `json:"capacity"`
	Allocatable resource.Quantity `json:"allocatable"`
}

// NodeStatusData is the status of a node, you can set some custom attributes in this data structure
type NodeStatusData struct {
	Resources         map[v1.ResourceName]NodeResource `json:"resources"`
	CustomLabels      map[string]string                `json:"customLabels"`
	CustomAnnotations map[string]string                `json:"customAnnotations"`
	CustomConditions  []v1.NodeCondition               `json:"customConditions"`
}

// OperationResponseResult is the container operation response result
type OperationResponseResult string

const (
	OperationResponseCodeSuccess OperationResponseResult = "SUCCESS"
	OperationResponseCodeFailure OperationResponseResult = "FAIL"
)

// ContainerOperationResponseData is the data of base biz operation response.
type ContainerOperationResponseData struct {
	ContainerKey string                  `json:"containerKey"`
	Result       OperationResponseResult `json:"result"`
	Reason       string                  `json:"reason"`
	Message      string                  `json:"message"`
}

// ContainerState is the state of a container, will set to pod state and show on k8s
type ContainerState string

const (
	ContainerStateActivated   = "ACTIVATED"
	ContainerStateResolved    = "RESOLVED"
	ContainerStateDeactivated = "DEACTIVATED"
)

// PodKeyAll present container status will share to all pods
const PodKeyAll = "all"

// ContainerStatusData is the status data of a container
type ContainerStatusData struct {
	// Key generated by tunnel, need to be the same as Tunnel GetContainerUniqueKey of same container
	Key string `json:"key"`
	// Name container name
	Name string `json:"name"`
	// PodKey is the key of pod which contains this container ,you can set it to PodKeyAll to present a shared container
	PodKey     string         `json:"podKey"`
	State      ContainerState `json:"state"`
	ChangeTime time.Time      `json:"changeTime"`
	Reason     string         `json:"reason"`
	Message    string         `json:"message"`
}

type K8SConfig struct {
	// KubeClient
	KubeClient kubernetes.Interface

	// InformerSyncPeriod
	InformerSyncPeriod time.Duration
}
