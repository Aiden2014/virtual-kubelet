package model

import (
	v1 "k8s.io/api/core/v1"
	"k8s.io/apimachinery/pkg/api/resource"
	"k8s.io/client-go/kubernetes"
	"time"
)

type NetworkInfo struct {
	NodeIP   string `json:"nodeIP"`
	HostName string `json:"hostName"`
}

type NodeStatus string

const (
	NodeStatusActivated   NodeStatus = "ACTIVATED"
	NodeStatusDeactivated NodeStatus = "DEACTIVATED"
)

type NodeMetadata struct {
	Name    string     `json:"name"`
	Version string     `json:"version"`
	Status  NodeStatus `json:"status"`
}

type QueryBaselineRequest struct {
	Name         string            `json:"name"`
	Version      string            `json:"version"`
	CustomLabels map[string]string `json:"customLabels"`
	CustomTaints []v1.Taint        `json:"customTaints"`
}

// NodeInfo is the data of node info.
type NodeInfo struct {
	Metadata    NodeMetadata `json:"metadata"`
	NetworkInfo NetworkInfo  `json:"networkInfo"`
}

type NodeResource struct {
	Capacity    resource.Quantity `json:"capacity"`
	Allocatable resource.Quantity `json:"allocatable"`
}

type NodeStatusData struct {
	Resources         map[v1.ResourceName]NodeResource `json:"resources"`
	CustomLabels      map[string]string                `json:"customLabels"`
	CustomAnnotations map[string]string                `json:"customAnnotations"`
	CustomTaints      []v1.Taint                       `json:"customTaints"`
	CustomConditions  []v1.NodeCondition               `json:"customConditions"`
}

type OperationResponseResult string

const (
	OperationResponseCodeSuccess OperationResponseResult = "SUCCESS"
	OperationResponseCodeFailure OperationResponseResult = "FAIL"
)

// ContainerOperationResponseData is the data of base biz operation response.
type ContainerOperationResponseData struct {
	ContainerKey string                  `json:"containerKey"`
	Result       OperationResponseResult `json:"result"`
	Reason       string                  `json:"reason"`
	Message      string                  `json:"message"`
}

type ContainerState string

const (
	ContainerStateActivated   = "ACTIVATED"
	ContainerStateResolved    = "RESOLVED"
	ContainerStateDeactivated = "DEACTIVATED"
)

// PodKeyAll present container status will share to all pods
const PodKeyAll = "all"

type ContainerStatusData struct {
	// Key generated by tunnel
	Key        string         `json:"key"`
	Name       string         `json:"name"`
	PodKey     string         `json:"podKey"`
	State      ContainerState `json:"state"`
	ChangeTime time.Time      `json:"changeTime"`
	Reason     string         `json:"reason"`
	Message    string         `json:"message"`
}

type K8SConfig struct {
	// KubeClient
	KubeClient kubernetes.Interface

	// InformerSyncPeriod
	InformerSyncPeriod time.Duration
}
